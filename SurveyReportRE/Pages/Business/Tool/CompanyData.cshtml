@page
@model CompanyDataModel
@{
    ViewData["Title"] = "CompanyData Configuration";
    ViewBag.Title = "SessionStorage Viewer";
}
<script>
    $(function () {

       var fetchTables = ["Client", "Outline", "DataGridConfig"];
       // var fetchTables = ["Client", "Outline"];
        // Parse dữ liệu từ sessionStorage
       $("#getCompanyDataButton").dxButton({
            height: 50,
            width: 120,
            text: "Renew",
            type: "info",
            stylingMode: "contained",
            onClick: function () {
                fetchDataFromIndexedDB((data) => {
                });
                     queryIndexedDB();
                DevExpress.ui.notify("All CompanyData renew!", "success", 2000); // Hiển thị thông báo
            }
        });
          $("#queryCompanyDataButton").dxButton({
            height: 50,
            width: 120,
            text: "Query",
            type: "info",
            stylingMode: "contained",
            onClick: function () {
                queryIndexedDB();
            }
        });
        //   $("#clearDataButton").dxButton({
        //     height: 50,
        //     width: 120,
        //     text: "Clear",
        //     type: "info",
        //     stylingMode: "contained",
        //     onClick: function () {
                
        //     }
        // });


          // Hàm lấy dữ liệu từ IndexedDB
        function fetchDataFromIndexedDB(callback) {
            $.each(fetchTables, function (tableIndex, table) {
              $.ajax({
                url: table == "DataGridConfig" ? `api/${table}/GetAllScheme` : `api/${table}/GetAll`,
                method: "GET",
                success: function (data) {
                    addDataToIndexedDB(data, table);
                },
                error: function (error) {
                    console.error(`Error fetching data from ${endpoint}:`, error);
                },
            });
            });
        }

        function queryIndexedDB() {
            dataGrid.option("dataSource", _cacheCompanyData);
        }


        function addDataToIndexedDB(data, table) {
            if (_db != null) {
                const transaction = _db.transaction([_storeName], "readwrite");
                const store = transaction.objectStore(_storeName);

                const request = store.getAll();
                request.onsuccess = function (event) {
                    _cacheCompanyData = event.target.result;
                    const allRecords = event.target.result;

                    const filteredRecords = allRecords.filter((record) => record.table !== table);

                    const clearRequest = store.clear();
                    clearRequest.onsuccess = function () {
                        console.log("Store cleared successfully.");

                        filteredRecords.forEach((record) => {
                            store.add(record);
                        });

                        store.add({ rows: data, table: table });

                        console.log(`Data for table '${table}' updated successfully.`);
                    };

                    clearRequest.onerror = function (event) {
                        console.error("Error clearing store:", event.target.errorCode);
                    };
                };

                transaction.oncomplete = function () {
                    console.log("Transaction completed.");
                };

                transaction.onerror = function (event) {
                    console.error("Error adding data:", event.target.errorCode);
                };
            }
        }
        function deleteDatabase() {
            const request = indexed_db.deleteDatabase(dbName);

            request.onsuccess = function () {
                console.log(`Database "${dbName}" has been deleted.`);
            };

            request.onerror = function (event) {
                console.error(`Error deleting database "${dbName}":`, event.target.errorCode);
            };

            request.onblocked = function () {
                console.warn(`Database deletion is blocked. Close all connections.`);
            };
        }

        function clearDataByTable(storeName, tableName) {
            if (_db != null) {
                const transaction = _db.transaction([storeName], "readwrite");
                const store = transaction.objectStore(storeName);

                const getRequest = store.getAll();

                getRequest.onsuccess = function (event) {
                    const allRecords = event.target.result;

                    const filteredRecords = allRecords.filter((record) => record.table !== tableName);

                    const clearRequest = store.clear();

                    clearRequest.onsuccess = function () {
                        console.log(`All data in store '${storeName}' cleared.`);

                        filteredRecords.forEach((record) => {
                            store.add(record);
                        });

                        console.log(`Data for table '${tableName}' has been removed.`);
                    };

                    clearRequest.onerror = function (event) {
                        console.error("Error clearing store:", event.target.errorCode);
                    };
                };

                getRequest.onerror = function (event) {
                    console.error("Error fetching data:", event.target.errorCode);
                };

                transaction.oncomplete = function () {
                    console.log("Transaction completed.");
                };

                transaction.onerror = function (event) {
                    console.error("Transaction failed:", event.target.errorCode);
                };
            }
        }

        // Render lưới dxDataGrid
        const dataGrid = $("#indexDBContainer").dxDataGrid({
            // dataSource: sessionData,
            columnAutoWidth: true,
            showBorders: true,
            columns: [
                {
                    dataField: "id",
                    caption: "Id",
                    width: 150
                },
                {
                    dataField: "table",
                    caption: "Table",
                    width: 150
                },
                {
                    dataField: "rows",
                    caption: "Value",
                    cellTemplate: function (container, options) {
                       $("<a>")
                            .text("View Details")
                            .css({ cursor: "pointer", color: "blue", textDecoration: "underline" })
                            .on("click", function () {
                                const content = $("<div>").css({ padding: "10px" });
         
                    $("<pre>")
                        .text(JSON.stringify(options.data.rows, null, 2)) // Hiển thị JSON chi tiết, format đẹp
                        .css({ whiteSpace: "pre-wrap", wordWrap: "break-word" }) // Chỉnh style
                        .appendTo(content);

                   var popupInstance = $(`#inputTextPopup`).dxPopup({
                       width: "90%",
                       height: "90%",
                       showTitle: true,
                       title: `Details`,
                       dragEnabled: false,
                       closeOnOutsideClick: true,
                       contentTemplate: function (container) {
                           const listContainer = $("<div>")
                               .addClass("indexeddb-list-container")
                               .css({
                                "max-height": "calc(100% - 60px)", // Chiều cao trừ đi header và footer
                                    "overflow-y": "auto",
                                    "padding": "10px"
                                })
                               .appendTo(container);
                           listContainer.on("wheel", function (e) {
                               e.stopPropagation();
                           });

                           const table = $("<table>").css({
                                        width: "100%",
                                        borderCollapse: "collapse",
                                    });

                                    // Tạo header từ keys
                                    const headerRow = $("<tr>").appendTo(table);
                                    const keys = Object.keys(options.data.rows[0]);
                                    keys.forEach((key) => {
                                        $("<th>")
                                            .text(key)
                                            .css({
                                                border: "1px solid #ccc",
                                                padding: "5px",
                                                backgroundColor: "#f5f5f5",
                                                textAlign: "left",
                                            })
                                            .appendTo(headerRow);
                                    });

                                    // Tạo các dòng dữ liệu
                                    options.data.rows.forEach((row) => {
                                        const dataRow = $("<tr>").appendTo(table);
                                        keys.forEach((key) => {
                                            $("<td>")
                                                .text(row[key] !== null ? row[key] : "N/A") // Hiển thị giá trị hoặc N/A nếu null
                                                .css({
                                                    border: "1px solid #ccc",
                                                    padding: "5px",
                                                })
                                                .appendTo(dataRow);
                                        });
                                    });

                                    table.appendTo(listContainer);
                                    return container;
                       },
                       onHiding: function (e) {

                       },
                       toolbarItems: [{
                           widget: 'dxButton',
                           toolbar: 'bottom',
                           location: 'after',
                           options: {
                               stylingMode: 'contained',
                               type: 'normal',
                               text: "Close",
                               onClick() {
                                   popupInstance.hide();
                               },
                           },
                       }]

                   }).dxPopup("instance");
                   popupInstance.show();
                                    })
                                    .appendTo(container);
                            }
                        }
                    ]
        }).dxDataGrid("instance");
    });
</script>
<div id="getCompanyDataButton"></div>
<div id="queryCompanyDataButton"></div>
<div id="clearDataButton"></div>
<div id="indexDBContainer" class="container"></div>
