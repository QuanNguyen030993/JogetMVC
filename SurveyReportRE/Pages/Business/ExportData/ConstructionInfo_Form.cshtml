@page
@model ConstructionInfo_FormModel
@{


}


<style>
    /* 	.main-container-report {
                                display: flex;
                                width: 100%;
                                height: 95%;
                            } */

    .filter-container {
        width: 200px;
        transition: width 0.5s ease;
        white-space: nowrap;
    }

    .dx-field-item-label-location-left {
        width: 175px;
    }

    .custom-ConstructionInfo-custom {
        margin: 30px;
    }

    .sidenav {
        height: 100%;
        width: 0;
        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 25px;
    }

        .sidenav a {
            text-decoration: none;
            font-size: 25px;
            color: #818181;
            display: block;
            transition: 0.3s;
        }

            .sidenav a:hover {
                color: #f1f1f1;
            }

        .sidenav .closebtn {
            position: absolute;
            top: -20px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

    .mainside {
        transition: margin-left .5s;
        height: 105%;
    }

    @@media screen and (max-height: 450px) {
        .sidenav a {
            font-size: 18px;
        }
    }

</style>


@{
    string idContainer = "container" + ConstructionInfo_FormModel.ModelName;
    string idLeftTab = "leftTab" + ConstructionInfo_FormModel.ModelName;
    string idRightTab = "mainTabIndex" + ConstructionInfo_FormModel.ModelName;
    string idConstructionInfoBox = "formConstructionInfoBox" + ConstructionInfo_FormModel.ModelName;
    string idButton = "button" + ConstructionInfo_FormModel.ModelName;
    string ConstructionInfoToggle = "toggleSidenavPLProductionLine" + ConstructionInfo_FormModel.ModelName;
}



<script>
    function openNav() {
        document.getElementById("@idLeftTab").style.width = "275px";
        document.getElementById("@idRightTab").style.marginLeft = "275px";
    }

    function closeNav() {
        document.getElementById("@idLeftTab").style.width = "0";
        document.getElementById("@idRightTab").style.marginLeft = "0";
    }
</script>

@* <div id="@idConstructionInfoBox" style="text-align: right;" class="dExForm"></div> *@

<div id="@idContainer">
    <div style="position:relative;height:800px">
        <div id="@idLeftTab" class="sidenav">
            <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
            <div id="@idConstructionInfoBox" style="text-align: right;"></div>
            <div id="@idButton" style="left: 30px;top: 10px;"> </div>
        </div>
        <div id="@idRightTab" class="mainside">
            <span id="@ConstructionInfoToggle" style="cursor:pointer" onclick="openNav()">&#9776;Filter Panel</span>
            <div id='dataGrid_@ConstructionInfo_FormModel.ModelName' style="height: 100%; width:100%" class="report-grid a	pp-main-grid-container ">
            </div>
        </div>
    </div>
</div>

<script>
    var isOpen = true;
    $(function () {
        var _viewConfig = [
            { FilterField: "", Type: "dxDateBox", ElementName: "fromDateDateBox", Caption: "From Date", ParameterField: "FromDate", SelectedValue: null, ValueExpr: null, DisplayExpr: null, ShowColumns: null }
            , { FilterField: "", Type: "dxDateBox", ElementName: "toDateDateBox", Caption: "To Date", ParameterField: "ToDate", SelectedValue: null, ValueExpr: null, DisplayExpr: null, ShowColumns: null }
        ]
        var myGrid = null;
        var ConstructionInfoFormData = {};
        var selectedConstructionInfoItems = "";
        var filterExpr = null;
        var _filterWidth = 150;
        var _filterHeight = 30;
        var _enumWidth = 300;
        var _enumHeight = 500;
        var _entityWidth = 600;
        var _entityHeight = 500;
        var _isFirstLoad = true;
        var ConstructionInfoFormControls = [
        ];
        openNav();
        function RenderElementV2() {
            $.each(_viewConfig, function (i, item) {
                if (item.Type == "dxDateBox" ) {
                    ConstructionInfoFormControls.push({
                        elementAttr: { id: item.ElementName },
                        dataField: item.ElementName,
                        editorType: item.Type,//item.Type,
                        editorOptions: {
                            width: _filterWidth,
                            showClearButton: true
                        },
                        label: { location: "left", text: item.Caption },
                        validationRules: [{
                            type: "custom",
                            reevaluate: true,
                            validationCallback: function (options) {
                                var toDate = ConstructionInfoForm.getEditor("toDateDateDateBox");
                                var fromDate = ConstructionInfoForm.getEditor("fromDateDateBox");
                                var toDateValue = "";
                                var fromDateValue = "";

                                if (toDate && toDate.option('value'))
                                    toDateValue = toDate.option('value');
                                if (fromDate && fromDate.option('value'))
                                    fromDateValue = fromDate.option('value');

                                if (toDateValue && fromDateValue)
                                    if (toDateValue < fromDateValue) {
                                        // if (options.value < 0) {
                                        // options.rule.message = "To Date cannot be earlier than From Date.";
                                        return false;
                                        // }
                                    }
                                return true;
                            }, message: "To date cannot be earlier than from date.",
                        }]
                    });
                }
                if (item.Type == "Enum") {
                    var elements = appGetElementsByName(item.FilterField);
                    ConstructionInfoFormControls.push({
                        dataField: item.ElementName,
                        editorType: "dxDropDownBox",
                        label: { location: "left", text: item.Caption },
                        editorOptions: {
                            dropDownOptions: {
                                width: _enumWidth
                            },
                            width: _filterWidth,
                            valueExpr: "value",
                            displayExpr: "caption",
                            dataSource: new DevExpress.data.ArrayStore({
                                data: elements,
                                key: "value"
                            }),
                            columns: [
                                { dataField: "code", caption: "Mã" }
                                , { dataField: "caption", caption: "Tên" }
                            ],
                            contentTemplate: function (e) {
                                const $dataGrid = $("<div>").dxDataGrid({
                                    dataSource: e.component.option("dataSource"),
                                    columns: e.component.option("columns"),
                                    selection: { mode: "multiple" },
                                    onSelectionChanged: function (selectedItems) {
                                        e.component.selectedItem = selectedItems.selectedRowsData;
                                        const keys = selectedItems.selectedRowKeys;
                                        e.component.option("value", selectedItems.selectedRowsData.map(obj => obj.caption).join(','));
                                    }
                                });
                                return $dataGrid;
                            }
                        }
                    });
                }
                if (item.Type == "Entity") {
                    var mDropDownDS = new MDropDownDataSource();
                    var dataSource = mDropDownDS.getDropDownDS('Id', `api/${item.FilterField}Api/GetLookup`);
                    ConstructionInfoFormControls.push({
                        dataField: item.ElementName,
                        editorType: "dxDropDownBox",
                        label: { location: "left", text: item.Caption },
                        editorOptions: {
                            width: _filterWidth,
                            dropDownOptions: {
                                width: _entityWidth
                            },
                            valueExpr: item.ValueExpr,
                            displayExpr: item.DisplayExpr,
                            dataSource: dataSource,
                            columns: item.ShowColumns,
                            contentTemplate: function (e) {
                                const $dataGrid = $("<div>").dxDataGrid({
                                    selectionMode: 'all',
                                    // remoteOperations: { paging: true, filtering: true, sorting: true, grouping: true, summary: true, groupPaging: true },
                                    filterRow: { visible: true },
                                    dataSource: e.component.option("dataSource"),
                                    columns: e.component.option("columns"),
                                    selection: { mode: "multiple" },
                                    scrolling: {
                                        mode: 'virtual',
                                        preloadEnabled: false,
                                        showScrollbar: 'always'
                                    },
                                    width: "100%",
                                    height: "100%",
                                    allowItemDeleting: false,
                                    showSelectionControls: true,
                                    sorting: {
                                        mode: 'multiple',
                                    },
                                    onSelectionChanged: function (selectedItems) {
                                        e.component.selectedItem = selectedItems.selectedRowsData;
                                        const keys = selectedItems.selectedRowKeys;
                                        e.component.option("value", keys);
                                        e.component.option("value", selectedItems.selectedRowsData.map(obj => obj.Id).join(','));
                                    },
                                    columnAutoWidth: true,
                                    customizeColumns: function (columns) {
                                    },
                                });
                                return $dataGrid;
                            }
                        }
                    });
                }
                if (item.Type == "dxTextBox") {
                    ConstructionInfoFormControls.push({
                        dataField: item.ElementName,
                        editorType: item.Type,
                        editorOptions: {
                            width: _filterWidth,
                            showClearButton: true
                        },
                        label: { location: "left", text: item.Caption }
                    });
                }
            });


            $("#@idButton").dxButton({
                height: 30,
                width: 200,
                text: "Filter Date",
                onClick: function (e) {
                    if (ConstructionInfoForm.validate().isValid) {
                        var dataSource = $(`#dataGrid_@ConstructionInfo_FormModel.ModelName`).dxDataGrid().dxDataGrid("instance").option("dataSource");
                        var startDate = convertToDateString(ConstructionInfoForm.getEditor("fromDateDateBox").option("value"));
                        var endDate = convertToDateString(ConstructionInfoForm.getEditor("toDateDateBox").option("value"));
                        dataSource.filter([[["dateOfVisit", '>=', startDate], 'and', ["dateOfVisit", '<=', endDate]]]);
                        dataSource.load()
                            .done(function () {
                               myGrid.component.refresh();
                            })
                            .fail(function () {
                            });
                    }
                    else {
                        alert("To date cannot be earlier than from date.");
                    }
                }
            }).addClass("custom-ConstructionInfo-custom");
        }



        var ConstructionInfoFormData = {};
        RenderElementV2();
        var ConstructionInfoForm = $('<div style="text-align: left;">').appendTo($("#@idConstructionInfoBox")).dxForm({
            items: [{ itemType: "group", items: ConstructionInfoFormControls }],
            width: 300
        }).dxForm('instance');

        myGrid = new MGrid(null, $(`#dataGrid_@ConstructionInfo_FormModel.ModelName`), new ConstructionInfoGridOption('@ConstructionInfo_FormModel.ModelName'), null);

        myGrid.component.option("onExporting", function (e) {
             var dataGrid = e.component;
             var rowsData = myGrid.component.getVisibleRows();
             if (rowsData.length != 0) {
                 var workbook = new ExcelJS.Workbook();
                 var count = 0;
                 var rowHeaderHeight = 35;
                 var rowDataHeight = 44;
                  const process = function () {
                       const worksheet = workbook.addWorksheet("Detail");
                       DevExpress.excelExporter.exportDataGrid({
                           component: e.component,
                           worksheet: worksheet,
                       }).then(() => {
                           var columns = worksheet.columns;
                           var headerRow = worksheet.getRow(1, 2);

                           headerRow.eachCell({ includeEmpty: true }, (cell) => {
                               cell.style.font = {
                                   bold: true,
                                   color: { argb: 'FF000000' }
                                   
                               };
                               cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'ffc6d9f1' } };
                               worksheet.getRow(1).height = rowHeaderHeight; // đơn vị: point
                           });
                           columns.forEach((column, index) => {
                               column.eachCell({ includeEmpty: true }, (cell) => {
                                   cell.border = {
                                       top: { style: 'thin', color: { argb: 'FF000000' } },
                                       left: { style: 'thin', color: { argb: 'FF000000' } },
                                       bottom: { style: 'thin', color: { argb: 'FF000000' } },
                                       right: { style: 'thin', color: { argb: 'FF000000' } }
                                   };
                                   const excelRowIndex = cell.row;
                                   worksheet.getRow(excelRowIndex).height = rowDataHeight;
                               });
                                var maxLength = 10;
                                column.eachCell?.({ includeEmpty: true }, (cell) => {
                                    const cellValue = cell.value ? cell.value.toString() : "";
                                    if (cellValue.length > maxLength) {
                                        maxLength = cellValue.length;
                                    }
                                });
                                column.width = maxLength + 2; // thêm 1–2 để tránh cắt chữ
                           });
                           workbook.xlsx.writeBuffer().then((buffer) => {
                               saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'ConstructionInfo.xlsx');
                           });
                       });
                   }
                   process();
                   e.cancel = true;
             }
        });

        myGrid.component.refresh();
        function getConstructionInfoParameters() {
            var params = {};
            _viewConfig.forEach(function (item) {
                var instance = ConstructionInfoForm.getEditor(item.ElementName);
                if (instance) {
                    switch (item.Type) {
                        case "dxDateBox":
                            params[item.ParameterField] = convertToDateString(instance.option("value"));
                            break;
                        case "Enum":
                        case "Entity":
                            if (instance.selectedItem) {
                                var values = instance.selectedItem.map(obj => obj.value || obj.Id);
                                params[item.ElementName] = values.join(",");
                            }
                            break;
                        case "dxTextBox":
                            params[item.ParameterField] = instance.option("value");
                            break;
                    }
                }
            });
            return params;
        }
    });

    function convertToDateString(dateTime) {
        if (dateTime != null) {
            var year = dateTime.getFullYear();
            var month = ('0' + (dateTime.getMonth() + 1)).slice(-2);
            var day = ('0' + dateTime.getDate()).slice(-2);
            return formattedDate = year + '-' + month + '-' + day;
        }
        else {
            return null;
        }
    }

</script>
